package net.ttddyy.dsproxy;

import org.hsqldb.jdbc.JDBCDataSource;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

import static net.ttddyy.dsproxy.TestUtils.TestingProxyType.IMPL;
import static net.ttddyy.dsproxy.TestUtils.TestingProxyType.JDK_PROXY;

/**
 * @author Tadaya Tsuyukubo
 */
public class TestUtils {

    public static final TestingProxyType TESTING_PROXY_TYPE;

    static {
        // Populate proxy type via system property. See surefire plugin setting on pom.xml.
        String proxyType = System.getProperty("proxyType", JDK_PROXY.toString());  // default to JDK_PROXY
        TESTING_PROXY_TYPE = TestingProxyType.valueOf(proxyType);
    }

    public enum TestingProxyType {
        /**
         * Test with jdk proxy
         */
        JDK_PROXY,

        /**
         * Test with concrete JDBC API implementation classes
         */
        IMPL
    }

    /**
     * Testing with jdk proxy
     */
    public static boolean isTestingProxy() {
        return JDK_PROXY == TESTING_PROXY_TYPE;
    }

    /**
     * Testing with delegating class impl
     */
    public static boolean isTestingImpl() {
        return IMPL == TESTING_PROXY_TYPE;
    }

    public static DataSource getDataSourceWithData() throws Exception {
        JDBCDataSource dataSource = new JDBCDataSource();
        dataSource.setDatabase("jdbc:hsqldb:mem:aname");
        dataSource.setUser("sa");

        executeQuery(dataSource,
                "create table emp ( id integer primary key, name varchar(10) );",
                "insert into emp ( id, name ) values (1, 'foo');",
                "insert into emp ( id, name ) values (2, 'bar');"
        );

        executeQuery(dataSource,
                "create table emp_with_auto_id ( id integer generated by default as identity primary key, name varchar(10) );",
                "insert into emp_with_auto_id ( name ) values ('foo');",
                "insert into emp_with_auto_id ( name ) values ('bar');"
        );

        return dataSource;
    }

    private static void executeQuery(DataSource dataSource, String... queries) throws Exception {
        Connection conn = dataSource.getConnection();
        Statement stmt = conn.createStatement();
        for (String query : queries) {
            stmt.execute(query);
        }
        conn.close();
    }

    public static void shutdown(DataSource dataSource) throws Exception {
        executeQuery(dataSource, "shutdown;");
    }

    public static int countTable(DataSource dataSource, String tableName) throws Exception {
        Connection conn = dataSource.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("select count(*) from " + tableName);
        rs.next();
        conn.close();
        return rs.getInt(1);
    }
}
